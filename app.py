from flask import Flask, render_template, render_template_string, url_for
import markdown
import os
import re

app = Flask(__name__)

NAVIGATION = [
    {
        "title": "Home",
        "pages": [
            {"name": "home", "display": "Home Page"}
        ]
    },
    {
        "title": "Using SONA",
        "pages": [
            {"name": "conduct_study", "display": "Overview of Steps"},
            {"name": "Log_in_to_SONA", "display": "Step 1: Log in"},
            {"name": "Create_a_New_Study", "display": "Step 2: Create a New Study"},
            {"name": "Initial_Study_Verification", "display": "Step 3: Initial Study Verification"},
            {"name": "Initial_Study_Verification", "display": "Step 4: Additional Steps for Physical Studies"}
        ]
    },
    # Add more sections as needed
]

CALLOUT_RE = re.compile(
    r">\[\!(\w+)\]\-(.*?)\n((?:>\s?.*?\n)+)(?=\n[^>]|$)",
    re.MULTILINE | re.DOTALL
)



def preprocess_markdown(md_content):
    def replace(match):
        callout_type = match.group(1).lower()
        title = match.group(2).strip()
        content = match.group(3).strip()

        # Process each line, removing the '>' prefix and converting to HTML
        content_html = markdown.markdown('\n'.join(line.lstrip('> ') for line in content.split('\n')), 
                                         extensions=['extra', 'toc', 'sane_lists', 'smarty'])
        
        toggle_id = f"toggle_{id(content)}"
        return (f'<div class="callout callout-{callout_type}">'
                f'<button onclick="toggleVisibility(\'{toggle_id}\')">'
                f'<span class="callout-title">{title}</span>'
                f'</button>'
                f'<div id="{toggle_id}" class="callout-content" style="display:none;">{content_html}</div>'
                f'</div>')

    # Preprocess callouts
    processed_content = CALLOUT_RE.sub(replace, md_content)
    # Now convert the rest of the markdown which was not in a callout block
    return markdown.markdown(processed_content, extensions=['extra', 'toc', 'sane_lists', 'smarty'])



def markdown_to_html(filename):
    with open(filename, 'r', encoding='utf-8') as f:
        text = f.read()
        preprocessed_text = preprocess_markdown(text)
        html = markdown.markdown(preprocessed_text, extensions=['extra', 'toc', 'sane_lists', 'smarty'])
    return html


@app.route('/<page_name>')
def show_page(page_name):
    file_path = os.path.join('markdown_files', f'{page_name}.md')
    if os.path.exists(file_path):
        content = markdown_to_html(file_path)
        # If you plan to use the 'toc' generated by the 'toc' extension, ensure that 'markdown_to_html'
        # is modified to also return the 'toc' and then pass it to the template.
        return render_template('base.html', content=content, title=page_name.capitalize(), navigation=NAVIGATION)
    else:
        return "Page not found", 404

if __name__ == "__main__":
    app.run(debug=True)

